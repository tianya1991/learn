<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.studentdemo.datasource.dao.StudentMapper">
    <resultMap id="BaseResultMap" type="com.example.studentdemo.datasource.entity.Student">
        <id column="SNO" jdbcType="VARCHAR" property="sno"/>
        <result column="NAME" jdbcType="VARCHAR" property="name"/>
        <result column="GENDER" jdbcType="VARCHAR" property="gender"/>
        <result column="AGE" jdbcType="NUMERIC" property="age"/>
        <result column="ADDRESS" jdbcType="VARCHAR" property="address"/>
        <result column="PHONE" jdbcType="VARCHAR" property="phone"/>
        <result column="CREATETIME" jdbcType="TIMESTAMP" property="createtime"/>
        <result column="UPDATETIME" jdbcType="TIMESTAMP" property="updatetime"/>
        <result column="DEL_TAG" jdbcType="CHAR" property="delTag"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    SNO, "NAME", GENDER, AGE, ADDRESS, PHONE, CREATETIME, UPDATETIME, DEL_TAG
  </sql>
    <select id="selectByExample" parameterType="com.example.studentdemo.datasource.entity.StudentCriteria"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from STUDENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from STUDENT
        where SNO = #{sno,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from STUDENT
    where SNO = #{sno,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByExample" parameterType="com.example.studentdemo.datasource.entity.StudentCriteria">
        delete from STUDENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.studentdemo.datasource.entity.Student">
    insert into STUDENT (SNO, "NAME", GENDER, 
      AGE, ADDRESS, PHONE, 
      CREATETIME, UPDATETIME, DEL_TAG
      )
    values (#{sno,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR}, 
      #{age,jdbcType=NUMERIC}, #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP}, #{delTag,jdbcType=CHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.example.studentdemo.datasource.entity.Student">
        insert into STUDENT
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="sno != null">
                SNO,
            </if>
            <if test="name != null">
                "NAME",
            </if>
            <if test="gender != null">
                GENDER,
            </if>
            <if test="age != null">
                AGE,
            </if>
            <if test="address != null">
                ADDRESS,
            </if>
            <if test="phone != null">
                PHONE,
            </if>
            <if test="createtime != null">
                CREATETIME,
            </if>
            <if test="updatetime != null">
                UPDATETIME,
            </if>
            <if test="delTag != null">
                DEL_TAG,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="sno != null">
                #{sno,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                #{age,jdbcType=NUMERIC},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createtime != null">
                #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatetime != null">
                #{updatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="delTag != null">
                #{delTag,jdbcType=CHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.studentdemo.datasource.entity.StudentCriteria"
            resultType="java.lang.Long">
        select count(*) from STUDENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update STUDENT
        <set>
            <if test="record.sno != null">
                SNO = #{record.sno,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                "NAME" = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.gender != null">
                GENDER = #{record.gender,jdbcType=VARCHAR},
            </if>
            <if test="record.age != null">
                AGE = #{record.age,jdbcType=NUMERIC},
            </if>
            <if test="record.address != null">
                ADDRESS = #{record.address,jdbcType=VARCHAR},
            </if>
            <if test="record.phone != null">
                PHONE = #{record.phone,jdbcType=VARCHAR},
            </if>
            <if test="record.createtime != null">
                CREATETIME = #{record.createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updatetime != null">
                UPDATETIME = #{record.updatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.delTag != null">
                DEL_TAG = #{record.delTag,jdbcType=CHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update STUDENT
        set SNO = #{record.sno,jdbcType=VARCHAR},
        "NAME" = #{record.name,jdbcType=VARCHAR},
        GENDER = #{record.gender,jdbcType=VARCHAR},
        AGE = #{record.age,jdbcType=NUMERIC},
        ADDRESS = #{record.address,jdbcType=VARCHAR},
        PHONE = #{record.phone,jdbcType=VARCHAR},
        CREATETIME = #{record.createtime,jdbcType=TIMESTAMP},
        UPDATETIME = #{record.updatetime,jdbcType=TIMESTAMP},
        DEL_TAG = #{record.delTag,jdbcType=CHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.studentdemo.datasource.entity.Student">
        update STUDENT
        <set>
            <if test="name != null">
                "NAME" = #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                GENDER = #{gender,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                AGE = #{age,jdbcType=NUMERIC},
            </if>
            <if test="address != null">
                ADDRESS = #{address,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                PHONE = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createtime != null">
                CREATETIME = #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="updatetime != null">
                UPDATETIME = #{updatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="delTag != null">
                DEL_TAG = #{delTag,jdbcType=CHAR},
            </if>
        </set>
        where SNO = #{sno,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.studentdemo.datasource.entity.Student">
    update STUDENT
    set "NAME" = #{name,jdbcType=VARCHAR},
      GENDER = #{gender,jdbcType=VARCHAR},
      AGE = #{age,jdbcType=NUMERIC},
      ADDRESS = #{address,jdbcType=VARCHAR},
      PHONE = #{phone,jdbcType=VARCHAR},
      CREATETIME = #{createtime,jdbcType=TIMESTAMP},
      UPDATETIME = #{updatetime,jdbcType=TIMESTAMP},
      DEL_TAG = #{delTag,jdbcType=CHAR}
    where SNO = #{sno,jdbcType=VARCHAR}
  </update>
    <select id="selectByExampleWithRowbounds" parameterType="com.example.studentdemo.datasource.entity.StudentCriteria"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from STUDENT
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectStudentsByPage" resultType="com.example.studentdemo.datasource.entity.Student">
        select * from
        (select t.*,ROWNUM RN
        from (select * from STUDENT) t
        where ROWNUM &lt;= #{pageNo}*#{pageSize})
        where RN &gt;= (#{pageNo}-1)*#{pageSize}
    </select>

    <select id="selectTotal" resultType="int">
        select count(1) from STUDENT
    </select>
</mapper>